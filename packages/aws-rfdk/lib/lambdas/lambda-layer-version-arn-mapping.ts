/**
 * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 * SPDX-License-Identifier: Apache-2.0
 */

import {
  ILayerVersion,
  LayerVersion,
} from '@aws-cdk/aws-lambda';
import {
  CfnMapping,
  Construct,
  Stack,
} from '@aws-cdk/core';
import {
  ARNS,
} from './lambdaLayerVersionArns';

/**
 * Enumeration of our lambda layers.
 *
 * The values of these must match the names our lambda layers with non-alphanumeric
 * characters removed and in lowercase.
 */
export enum LambdaLayer {
  OPEN_SSL_AL2 = 'opensslal2',
}

type RegionMap<T> = { [region: string]: T };
type LambdaLayerVersionArnMap<T> = { [layer: string]: T };

/**
 * A `CfnMapping` of our lambda layer version ARNs, from the autogenerated `lambdaLayerVersionArns.ts` file.
 */
export class LambdaLayerVersionArnMapping extends CfnMapping {
  /**
   * Gets a Lambda LayerVersion for the specified layer.
   *
   * Note that this uses a `CfnMapping` that is unique within a stack. This method will create a `CfnMapping`
   * if it does not already exist (i.e. this method has not been called yet).
   * @param scope The scope to create the LayerVersion in.
   * @param id The ID of the construct.
   * @param layer The layer to get.
   */
  public static getLambdaLayerVersion(scope: Construct, id: string, layer: LambdaLayer): ILayerVersion {
    const instance = this.getSingletonInstance(scope);
    return LayerVersion.fromLayerVersionArn(scope, id, instance.findInMap(instance.stack.region, layer));
  }

  /**
   * Gets the singleton instance (per-stack) of this class.
   * @param scope The parent construct.
   */
  protected static getSingletonInstance(scope: Construct) {
    const uuid = '7a9adb59-d5d0-42fb-bc5b-a55bcbf6a6b2';
    const uniqueId = 'LambdaLayerVersionArnMapping' + uuid.replace(/[-]/g, '');
    const stack = Stack.of(scope);

    return (stack.node.tryFindChild(uniqueId) as LambdaLayerVersionArnMapping) ?? new LambdaLayerVersionArnMapping(stack, uniqueId, ARNS);
  }

  protected constructor(scope: Construct, id: string, arnMap: LambdaLayerVersionArnMap<RegionMap<string>>) {
    /*
    Transform the ARNS object into a CfnMapping-compatible object because
    CfnMapping attribute names are restricted to alphanumeric characters
    See: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/mappings-section-structure.html

    Instead of:
    {
      "openssl-al2": {
        "us-west-2": "<lambda-layer-arn>",
        "us-east-1": "<lambda-layer-arn>",
        // etc.
      },
      "other-lambda-layer": { ... },
      // etc.
    }

    We switch around the region and layer name and remove non-alphanumeric
    characters in the layer name to get:
    {
      "us-west-2": {
        "opensslal2": "<lambda-layer-arn>",
        "otherlambdalayer": "<lambda-layer-arn>",
        // etc.
      },
      "us-east-1": { ... },
      // etc.
    }
    */

    const transformedArns: RegionMap<LambdaLayerVersionArnMap<string>> = {};
    Object.entries(arnMap).forEach(entry => {
      const [ layer, regionMap ] = entry;
      const alphanumLayer = layer.replace(/[^a-zA-Z0-9]/g, '').toLowerCase();
      Object.entries(regionMap).forEach(kvp => {
        const [ region, layerArn ] = kvp;
        if (transformedArns[region] === undefined) {
          transformedArns[region] = {};
        }
        transformedArns[region][alphanumLayer] = layerArn;
      });
    });

    super(scope, id, { mapping: transformedArns });
  }
}
